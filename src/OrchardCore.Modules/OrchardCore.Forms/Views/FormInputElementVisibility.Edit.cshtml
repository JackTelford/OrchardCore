@using OrchardCore
@using OrchardCore.Forms.ViewModels
@using System.Text.Json

@model FormInputElementVisibilityViewModel

@{
    var idPrefix = Html.IdForModel();
}

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="Action" class="@Orchard.GetLabelClasses()">@T["Action"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="Action" asp-items="Model.Actions" class="form-select"></select>
        <span class="hint">@T["The action to take when the condition is met."]</span>
    </div>
</div>

<div class="input-visibility-settings">
    <div id="@(idPrefix)_groupsContainerId"
         class="main-group-container"
         data-vue-app="formVisibility"
         data-groups='@Html.Raw(JsonSerializer.Serialize(Model.Groups, JOptions.CamelCaseIndented))'
         data-prefix="@Html.NameForModel()"
         data-operator-options='@Html.Raw(JsonSerializer.Serialize(Model.Groups.First().Rules.First().Operators, JOptions.CamelCaseIndented))'
         data-name-field='@Html.Raw(JsonSerializer.Serialize(Model.Groups.First().Rules.First().Fields, JOptions.CamelCaseIndented))'>
    </div>
</div>

<script asp-name="form-visibility" asp-src="/OrchardCore.Forms/Scripts/form-visibility.min.js" src-debug="/OrchardCore.Forms/Scripts/form-visibility.js" at="Foot" depends-on="vuejs:2"></script>

<script at="Foot" asp-name="InitializeGroups">

    const flowWidgetObserver = new MutationObserver(function (mutationsList) {
        for (const mutation of mutationsList) {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        const containers = node.matches('.main-group-container')
                            ? [node]
                            : [...node.querySelectorAll('.main-group-container')];

                       processContainers(containers);
                    }
                });
            }
        }
    });

    function processContainers(containers) {
         containers.forEach(container => {
            initializeOrUpdateVue(container);
        });
    }

    document.addEventListener('DOMContentLoaded', () =>
    {
        const containers = [...document.querySelectorAll('.main-group-container')];
        processContainers(containers);
    });

    function initializeOrUpdateVue(container) {
        formVisibilityGroups.initialize({
            appElementSelector: '#' + container.id,
            prefix: container.getAttribute('data-prefix'),
            widgetId: container.getAttribute('data-prefix'),
            groupOptions: JSON.parse(container.getAttribute('data-groups') || '{}'),
            FieldOptions: JSON.parse(container.getAttribute('data-name-field') || '{}'),
            operatorOptions: JSON.parse(container.getAttribute('data-operator-options') || '{}'),
        });
    }

    flowWidgetObserver.observe(document.body, { childList: true, subtree: true });

    Vue.config.productionTip = false;
    Vue.config.devtools = false;
</script>
