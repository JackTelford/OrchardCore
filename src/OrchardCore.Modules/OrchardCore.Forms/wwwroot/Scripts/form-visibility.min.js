window.formVisibilityGroups=function(){var e={template:'\n           <div>\n        <ul class="list-group">\n            \x3c!-- Loop through each group --\x3e\n            <li class="list-group-item" v-for="(group, groupIndex) in groups" :key="groupIndex">\n                <div class="d-flex justify-content-between mb-2">\n                    <span>Group {{ groupIndex + 1 }}</span>\n                    <input type="hidden" :name="prefix + \'Groups[\' + groupIndex + \'].IsRemoved\'" value="false" />\n                    <button type="button" class="btn btn-sm btn-danger" @click="removeGroup(groupIndex)">\n                        <i class="fa-solid fa-trash"></i> Remove Group\n                    </button>\n                </div>\n\n                \x3c!-- Loop through each rule --\x3e\n                <ul class="list-group mb-3">\n                    \x3c!-- Loop through each rule in the group --\x3e\n                    <li class="list-group-item" v-for="(rule, ruleIndex) in group.rules" :key="ruleIndex">\n                        <div class="row">\n                            <div class="col">\n                                <select class="form-select" v-model="rule.field" :name="prefix + \'Groups[\' + groupIndex + \'].Rules[\' + ruleIndex + \'].Field\'">\n                                    <option value="">Select Field</option>\n                                    <option v-for="option in fieldOptions" :value="option.value">\n                                        {{ option.text }}\n                                    </option>\n                                </select>\n                            </div>\n\n                            <div class="col">\n                                <select class="form-select" v-model="rule.operator" :name="prefix + \'Groups[\' + groupIndex + \'].Rules[\' + ruleIndex + \'].Operator\'">\n                                    <option value="">Select Operator</option>\n                                    <option v-for="option in operatorOptions" :value="option.value">\n                                        {{ option.text }}\n                                    </option>\n                                </select>\n                            </div>\n\n                            <div class="col">\n                                <input type="text" class="form-control" v-model="rule.value" placeholder="Value" :name="prefix + \'Groups[\' + groupIndex + \'].Rules[\' + ruleIndex + \'].Value\'" />\n                            </div>\n\n                            <div class="col-auto">\n                                <input type="hidden" :name="prefix + \'Groups[\' + groupIndex + \'].Rules[\' + ruleIndex + \'].IsRemoved\'" value="false" />\n                                <button type="button" class="btn btn-sm btn-danger" @click="removeRule(groupIndex, ruleIndex)">\n                                    <i class="fa-solid fa-trash"></i> Remove Rule\n                                </button>\n                            </div>\n                        </div>\n                    </li>\n                    <li class="list-group-item">\n                        <div class="d-flex justify-content-end mb-2">\n                            <button type="button" class="btn btn-sm btn-secondary" @click="addRule(groupIndex)">\n                                <i class="fa-solid fa-circle-plus"></i> New Rule\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n            </li>\n            <li class="list-group-item">\n                <div class="d-flex justify-content-end">\n                    <button type="button" class="btn btn-sm btn-primary" @click="addGroup()">\n                        <i class="fa-solid fa-circle-plus"></i> New Group\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </div>\n        '};return{initialize:function(t){var n=Object.assign({},e,t);if(n.appElementSelector){var o=0;return new Vue({el:n.appElementSelector,data:function(){return{groups:[],fieldOptions:n.fieldOptions||[],operatorOptions:[],prefix:"",widgetId:n.appElementSelector.replace("#","")}},computed:{groupsJson:function(){return JSON.stringify(this.groups)}},methods:{addGroup:function(){this.groups.push({id:"group-"+o++,rules:[]})},addRule:function(e){var t={id:"rule-"+Date.now()+"-"+Math.floor(1e3*Math.random()),field:"",operator:"",value:""};this.groups[e].rules.push(t)},removeGroup:function(e){this.groups.splice(e,1)},removeRule:function(e,t){this.groups[e].rules.splice(t,1)},populateFields:function(){var e=this.getInputs();this.fieldOptions=e.map((function(e){return{value:e.htmlId,text:e.htmlName}}))},getInputs:function(){var e=document.querySelectorAll(".widget-template"),t=[];return e.forEach((function(e){var n=e.querySelector('input[name$="FormElementPart.Id"]'),o=e.querySelector('input[name$="FormInputElementPart.Name"]'),r=e.querySelector('select[name$="InputPart.Type"]');if(n&&r){var l=n.value,u=o.value,s=r.options[r.selectedIndex].value;if(!n.value||!s)return;t.push({htmlId:l,htmlName:u,htmlInputType:s})}})),t},findOperators:function(){var e=document.getElementById("operatorData");if(e)try{return JSON.parse(e.getAttribute("data-operators"))}catch(e){console.error("Error parsing operator data:",e)}return[]},populateGroupsFromInputs:function(){var e=document.querySelectorAll('[name^="'.concat(this.prefix,'Groups["][name*="').concat(this.widgetId,'"]')),t=new Map;e.forEach((function(e){var n=e.name.match(/Groups\[(\d+)\]\.Rules\[(\d+)\]\.(Field|Operator|Value)/);if(n){var o=Number(n[1]),r=Number(n[2]),l=n[3].toLowerCase();t.has(o)||t.set(o,{rules:[]}),t.get(o).rules[r]||(t.get(o).rules[r]={field:"",operator:"",value:""}),t.get(o).rules[r][l.toLowerCase()]=e.value}})),this.groups=Array.from(t.values())}},mounted:function(){var e=this;n.prefix&&(this.prefix=n.prefix+"."),this.$nextTick((function(){e.populateFields(),e.operatorOptions=e.findOperators();var t=localStorage.getItem("savedGroups_".concat(e.widgetId));if(t)try{e.groups=JSON.parse(t),console.log("✅ Restored groups for widget ".concat(e.widgetId," from localStorage:"),e.groups)}catch(e){console.error("❌ Failed to parse saved groups:",e)}else e.populateGroupsFromInputs();e.$watch("groups",(function(t){localStorage.setItem("savedGroups_".concat(e.widgetId),JSON.stringify(t))}),{deep:!0})}))},template:n.template})}console.error("appElementSelector is required")}}}();
