/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

window.formVisibilityGroups = function () {
  var defaultConfig = {
    template: "\n           <div>\n        <ul class=\"list-group\">\n            <!-- Loop through each group -->\n            <li class=\"list-group-item\" v-for=\"(group, groupIndex) in groups\" :key=\"groupIndex\">\n                <div class=\"d-flex justify-content-between mb-2\">\n                    <span>Group {{ groupIndex + 1 }}</span>\n                    <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].IsRemoved'\" value=\"false\" />\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeGroup(groupIndex)\">\n                        <i class=\"fa-solid fa-trash\"></i> Remove Group\n                    </button>\n                </div>\n\n                <!-- Loop through each rule -->\n                <ul class=\"list-group mb-3\">\n                    <!-- Loop through each rule in the group -->\n                    <li class=\"list-group-item\" v-for=\"(rule, ruleIndex) in group.rules\" :key=\"ruleIndex\">\n                        <div class=\"row\">\n                            <div class=\"col\">\n                                <select class=\"form-select\" v-model=\"rule.field\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Field'\">\n                                    <option value=\"\">Select Field</option>\n                                    <option v-for=\"option in fieldOptions\" :value=\"option.value\">\n                                        {{ option.text }}\n                                    </option>\n                                </select>\n                            </div>\n\n                            <div class=\"col\">\n                                <select class=\"form-select\" v-model=\"rule.operator\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Operator'\">\n                                    <option value=\"\">Select Operator</option>\n                                    <option v-for=\"option in operatorOptions\" :value=\"option.value\">\n                                        {{ option.text }}\n                                    </option>\n                                </select>\n                            </div>\n\n                            <div class=\"col\">\n                                <input type=\"text\" class=\"form-control\" v-model=\"rule.value\" placeholder=\"Value\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Value'\" />\n                            </div>\n\n                            <div class=\"col-auto\">\n                                <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].IsRemoved'\" value=\"false\" />\n                                <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeRule(groupIndex, ruleIndex)\">\n                                    <i class=\"fa-solid fa-trash\"></i> Remove Rule\n                                </button>\n                            </div>\n                        </div>\n                    </li>\n                    <li class=\"list-group-item\">\n                        <div class=\"d-flex justify-content-end mb-2\">\n                            <button type=\"button\" class=\"btn btn-sm btn-secondary\" @click=\"addRule(groupIndex)\">\n                                <i class=\"fa-solid fa-circle-plus\"></i> New Rule\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n            </li>\n            <li class=\"list-group-item\">\n                <div class=\"d-flex justify-content-end\">\n                    <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addGroup()\">\n                        <i class=\"fa-solid fa-circle-plus\"></i> New Group\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </div>\n        "
  };
  var initialize = function initialize(instanceConfig) {
    var config = Object.assign({}, defaultConfig, instanceConfig);
    if (!config.appElementSelector) {
      console.error('appElementSelector is required');
      return;
    }
    var groupCounter = 0;
    var app = new Vue({
      el: config.appElementSelector,
      data: function data() {
        return {
          groups: [],
          fieldOptions: config.fieldOptions || [],
          operatorOptions: [],
          prefix: ''
        };
      },
      computed: {
        groupsJson: function groupsJson() {
          return JSON.stringify(this.groups);
        }
      },
      methods: {
        addGroup: function addGroup() {
          this.groups.push({
            id: 'group-' + groupCounter++,
            rules: []
          });
        },
        addRule: function addRule(groupIndex) {
          var newRule = {
            id: 'rule-' + Date.now() + '-' + Math.floor(Math.random() * 1000),
            field: '',
            operator: '',
            value: ''
          };
          this.groups[groupIndex].rules.push(newRule);
        },
        removeGroup: function removeGroup(groupIndex) {
          this.groups.splice(groupIndex, 1);
        },
        removeRule: function removeRule(groupIndex, ruleIndex) {
          this.groups[groupIndex].rules.splice(ruleIndex, 1);
        },
        populateFields: function populateFields() {
          var inputs = this.getInputs();
          this.fieldOptions = inputs.map(function (input) {
            return {
              value: input.htmlId,
              text: input.htmlName
            };
          });
        },
        getInputs: function getInputs() {
          var widgetElements = document.querySelectorAll('.widget-template');
          var results = [];
          widgetElements.forEach(function (widget) {
            var formElementInput = widget.querySelector('input[name$="FormElementPart.Id"]');
            var formElementNameInput = widget.querySelector('input[name$="FormInputElementPart.Name"]');
            var inputTypeSelect = widget.querySelector('select[name$="InputPart.Type"]');
            if (formElementInput && inputTypeSelect) {
              var htmlId = formElementInput.value;
              var htmlName = formElementNameInput.value;
              var selectedOption = inputTypeSelect.options[inputTypeSelect.selectedIndex].value;
              if (!formElementInput.value || !selectedOption) {
                return;
              }
              results.push({
                htmlId: htmlId,
                htmlName: htmlName,
                htmlInputType: selectedOption
              });
            }
          });
          return results;
        },
        findOperators: function findOperators() {
          var operatorData = document.getElementById('operatorData');
          if (operatorData) {
            try {
              return JSON.parse(operatorData.getAttribute('data-operators'));
            } catch (e) {
              console.error("Error parsing operator data:", e);
            }
          }
          return [];
        }
      },
      mounted: function mounted() {
        var _this = this;
        if (config.prefix) {
          this.prefix = config.prefix + '.';
        }
        console.log('config.appElementSelector:', config.appElementSelector); // Log the appElementSelector value

        //var appElement = document.querySelector(config.appElementSelector);

        //if (!appElement) {
        //    console.log('Null?:', appElement);
        //    return;
        //}

        //var data = appElement.getAttribute('data-groups') || '{}';
        //console.log("data-groups attribute value:", data); // Log the data-groups attribute value

        //var groups = JSON.parse(data);
        //console.log("Parsed groups data:", groups); // Log the parsed groups data

        //// Load groups from the data-groups attribute
        //if (groups) {
        //    this.groups = groups;
        //}

        //var savedGroups = localStorage.getItem('formVisibilityGroups');
        //if (savedGroups) {
        //    groups = JSON.parse(savedGroups);
        //}

        this.$nextTick(function () {
          _this.populateFields();
          console.log("Vue component mounted. Prefix is:", _this.prefix);
          _this.operatorOptions = _this.findOperators();
        });
      },
      template: config.template
    });
    return app;
  };
  return {
    initialize: initialize
  };
}();