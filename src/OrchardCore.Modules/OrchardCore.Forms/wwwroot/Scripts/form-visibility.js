/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

window.formVisibilityGroups = function () {
  var defaultConfig = {
    template: "\n        <div class=\"mb-3\">\n            <!-- Loop through each group -->\n            <div class=\"card mb-1\" v-for=\"(group, groupIndex) in groups\" :key=\"groupIndex\">\n                <div class=\"card-header d-flex justify-content-between align-items-center\">\n                    <span>Group {{ groupIndex + 1 }}</span>\n                    <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].IsRemoved'\" value=\"false\" />\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeGroup(groupIndex)\">\n                        <i class=\"fa-solid fa-trash\"></i>\n                    </button>\n                </div>\n                        \n                <div class=\"card-body\">\n\n                    <!-- Loop through each rule -->\n                    <ul class=\"list-group w-100\">\n                        <!-- Loop through each rule in the group -->\n                        <li class=\"list-group-item\" v-for=\"(rule, ruleIndex) in group.rules\" :key=\"ruleIndex\">\n                            <div class=\"row\">\n                                <div class=\"col\">\n                                    <select class=\"form-select\" v-model=\"rule.field\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Field'\">\n                                        <option value=\"\">Select Field</option>\n                                    <option v-for=\"option in filteredFieldOptions(rule.field)\" :value=\"option.value\">\n                                        {{ option.text }}\n                                        </option>\n                                    </select>\n                                </div>\n                                <div class=\"col\" :class=\"{'d-none': !rule.field}\">\n                                    <select class=\"form-select\" v-model=\"rule.operator\"\n                                    :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Operator'\">\n                                        <option value=\"\">Select Operator</option>\n                                        <option v-for=\"option in operatorsList(rule.field)\" :value=\"option.value\">\n                                            {{ option.text }}\n                                        </option>\n                                    </select>\n                                </div>\n                                <div class=\"col\" :class=\"{'d-none': !shouldShowValue(rule.operator)}\">\n                                    <input type=\"text\" class=\"form-control\" v-model=\"rule.value\" placeholder=\"Value\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Value'\" />\n                                </div>\n                                <div class=\"col-auto\">\n                                    <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].IsRemoved'\" value=\"false\" />\n                                    <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeRule(groupIndex, ruleIndex)\">\n                                        <i class=\"fa-solid fa-trash\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n  \n                    </ul>\n                </div>\n\n                <div class=\"card-footer\">\n                    <div class=\"d-flex justify-content-end\">\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addRule(groupIndex)\">\n                            <i class=\"fa-solid fa-plus\"></i> New Rule\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-end p-3\">\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addGroup()\">\n                    <i class=\"fa-solid fa-circle-plus\"></i> New Group\n                </button>\n            </div>\n        </div>\n        "
  };
  var initialize = function initialize(instanceConfig) {
    var config = Object.assign({}, defaultConfig, instanceConfig);
    if (!config.appElementSelector) {
      console.error('appElementSelector is required');
      return;
    }
    var groupCounter = 0;
    var app = new Vue({
      el: config.appElementSelector,
      data: function data() {
        return {
          groups: config.groupOptions || [],
          fieldOptions: config.FieldOptions || [],
          operatorOptions: config.operatorOptions || [],
          allOperatorOptions: config.operatorOptions || [],
          prefix: '',
          widgetId: config.widgetId,
          preloadedOptions: []
        };
      },
      methods: {
        addGroup: function addGroup() {
          var newGroup = {
            id: 'group-' + groupCounter++,
            rules: [{
              id: 'rule-' + Date.now() + '-' + Math.floor(Math.random() * 1000),
              field: '',
              operator: '',
              value: ''
            }]
          };
          this.groups.push(newGroup);
          this.$set(this.groups, this.groups.length - 1, newGroup);
        },
        addRule: function addRule(groupIndex) {
          var newRule = {
            id: 'rule-' + Date.now() + '-' + Math.floor(Math.random() * 1000),
            field: '',
            operator: '',
            value: ''
          };
          this.$set(this.groups[groupIndex].rules, this.groups[groupIndex].rules.length, newRule);
        },
        removeGroup: function removeGroup(groupIndex) {
          this.groups.splice(groupIndex, 1);
        },
        removeRule: function removeRule(groupIndex, ruleIndex) {
          this.groups[groupIndex].rules.splice(ruleIndex, 1);
        },
        populateFields: function populateFields() {
          var inputs = this.getInputs(document);
          this.fieldOptions = inputs.map(function (input) {
            return {
              value: input.htmlName,
              text: input.htmlName,
              type: input.htmlInputType
            };
          });
        },
        getInputs: function getInputs(el) {
          var widgetElements = el.querySelectorAll('.widget-template');
          var results = [];
          widgetElements.forEach(function (widget) {
            var formElementNameInput = widget.querySelector('input[name$="FormInputElementPart.Name"]');
            if (formElementNameInput) {
              var htmlName = formElementNameInput.value.trim();
              var selectedOption = 'text';
              var inputTypeSelect = widget.querySelector('select[name$="InputPart.Type"], select[name$="SelectPart.Editor"]');
              if (inputTypeSelect) {
                selectedOption = inputTypeSelect.options[inputTypeSelect.selectedIndex].value.toLowerCase();
              }
              if (!htmlName || !selectedOption) {
                return;
              }
              results.push({
                htmlName: htmlName,
                htmlInputType: selectedOption
              });
            }
          });
          return results;
        },
        filteredFieldOptions: function filteredFieldOptions() {
          var _widgetTemplate$query;
          var widgetTemplate = this.$el.closest('.widget-template');
          if (!widgetTemplate) return this.fieldOptions;
          var containerName = ((_widgetTemplate$query = widgetTemplate.querySelector('input[name$="FormInputElementPart.Name"]')) === null || _widgetTemplate$query === void 0 ? void 0 : _widgetTemplate$query.value.trim()) || "";
          if (!containerName) return this.fieldOptions;
          var setValues = new Set();
          var filteredOptions = this.fieldOptions.filter(function (option) {
            var optionValue = String(option.value || "").trim();
            if (optionValue === containerName) {
              return false;
            }
            if (setValues.has(optionValue)) {
              return false;
            }
            setValues.add(optionValue);
            return true;
          });
          return filteredOptions;
        },
        operatorsList: function operatorsList(fieldId) {
          var field = this.fieldOptions.find(function (field) {
            return field.value === fieldId;
          });
          if (!field) return [];
          var mapping = this.operatorMapping();
          if (!mapping[field.type]) return [];
          return this.allOperatorOptions.filter(function (x) {
            return mapping[field.type].includes(x.value);
          }
          // lowercase here maybe needed
          );
        },
        operatorMapping: function operatorMapping() {
          return {
            radio: ["Is", "IsNot"],
            checkbox: ["Is", "IsNot"],
            text: ["Is", "IsNot", "Empty", "NotEmpty", "Contains", "DoesNotContain", "StartsWith", "EndsWith"],
            number: ["Is", "IsNot", "GreaterThan", "LessThan"],
            email: ["Is", "IsNot", "Empty", "NotEmpty"],
            tel: ["Is", "IsNot"],
            date: ["Is", "IsNot", "GreaterThan", "LessThan"],
            time: ["Is", "IsNot", "GreaterThan", "LessThan"],
            "datetime": ["Is", "IsNot", "GreaterThan", "LessThan"],
            "datetime-local": ["Is", "IsNot", "GreaterThan", "LessThan"],
            month: ["Is", "IsNot"],
            week: ["Is", "IsNot"],
            hidden: ["Is", "IsNot"],
            password: ["Is", "IsNot", "Empty", "NotEmpty"],
            color: ["Is", "IsNot"],
            range: ["Is", "IsNot", "GreaterThan", "LessThan"],
            file: ["Is", "IsNot"],
            url: ["Is", "IsNot", "Contains"],
            image: ["Is", "IsNot"],
            reset: ["Is", "IsNot"],
            search: ["Is", "IsNot", "Contains"],
            dropdown: ["Is", "IsNot", "Empty", "NotEmpty", "Contains", "DoesNotContain", "StartsWith", "EndsWith"],
            textarea: ["Is", "IsNot", "Empty", "NotEmpty", "Contains", "DoesNotContain", "StartsWith", "EndsWith"],
            submit: []
          };
        },
        toggleTabEvent: function toggleTabEvent() {
          var _this = this;
          document.addEventListener('shown.bs.tab', function (event) {
            if (!event.target.matches('[data-bs-toggle="tab"]')) {
              return;
            }
            var container = event.target.closest('.content-part-wrapper-form-part');
            var inputs = _this.getInputs(container || document);
            _this.fieldOptions = inputs.map(function (input) {
              return {
                value: input.htmlName,
                text: input.htmlName,
                type: input.htmlInputType
              };
            });
          });
        },
        shouldShowValue: function shouldShowValue(operator) {
          if (!operator) {
            return false;
          }
          var check = operator;
          if (check === 'Empty' || check === 'NotEmpty') {
            return false;
          }
          return true;
        }
      },
      mounted: function mounted() {
        var _this2 = this;
        if (config.prefix) {
          this.prefix = config.prefix + '.';
        }
        this.toggleTabEvent();
        this.groups = config.groupOptions || [];
        this.operatorOptions = config.operatorOptions || [];
        this.allOperatorOptions = config.operatorOptions || [];
        this.populateFields();
        var observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (mutation.type === 'childList' && mutation.addedNodes.length) {
              _this2.preloadedOptions = _this2.filteredFieldOptions();
            }
          });
        });
        observer.observe(this.$el, {
          childList: true,
          subtree: true
        });
      },
      template: config.template
    });
    return app;
  };
  return {
    initialize: initialize
  };
}();