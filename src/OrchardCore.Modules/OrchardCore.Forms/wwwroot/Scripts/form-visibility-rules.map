{"version":3,"sources":["<anon>"],"sourcesContent":["window.formVisibilityGroupRules = (function () {\n    function initialize(data) {\n\n        const inputElement = getInputByName(data.elementName);\n\n        if (!inputElement || data.action === 'None') {\n            return;\n        }\n\n        const inputType = inputElement.type.toLowerCase();\n\n        if (inputType === 'checkbox' || inputType === 'radio') {\n            inputElement.setAttribute('data-default-value', inputElement.checked ? 'on' : 'off');\n        } else {\n            inputElement.setAttribute('data-default-value', inputElement.value);\n        }\n\n        const widgetContainer = inputElement.closest('.widget');\n\n        if (widgetContainer && !widgetContainer.dataset.originalDisplay) {\n            widgetContainer.dataset.originalDisplay = getComputedStyle(widgetContainer).display;\n        }\n\n        processGroups(data, inputElement, widgetContainer, true);\n\n        triggerProperChangeEvent(inputElement);\n    }\n\n    function triggerProperChangeEvent(element) {\n\n        const tagName = element.tagName;\n\n        const type = (element.type || '').toLowerCase();\n\n        if (tagName === 'SELECT' || type === 'file') {\n\n            element.dispatchEvent(new Event('change'));\n\n            return;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            document.querySelectorAll(`input[name=\"${element.name}\"]`).forEach(element => {\n                element.dispatchEvent(new Event('change'));\n            });\n            return;\n        }\n\n        if (tagName === 'INPUT' || tagName === 'TEXTAREA') {\n\n            element.dispatchEvent(new Event('input'));\n\n            element.dispatchEvent(new Event('keyup'));\n\n            return;\n        }\n\n        element.dispatchEvent(new Event('input'));\n    }\n\n    function addProperListeners(element, callback) {\n\n        const tagName = element.tagName;\n\n        const type = (element.type || '').toLowerCase();\n\n        if (tagName === 'SELECT') {\n\n            if (type === 'checkbox') {\n\n                element.addEventListener('change', callback);\n\n                return;\n            }\n\n            element.addEventListener('change', callback);\n\n            return;\n        }\n\n        if (tagName === 'INPUT') {\n\n            if (type === 'checkbox') {\n\n                var checkboxes = document.querySelectorAll(`input[name=\"${element.name}\"]`);\n\n                for (var i = 0; i < checkboxes.length; i++) {\n\n                    var checkbox = checkboxes[i];\n\n                    checkbox.addEventListener('change', callback);\n                }\n                return;\n            }\n\n            if (type === 'radio') {\n\n                var radioButtons = document.querySelectorAll(`input[name=\"${element.name}\"]`);\n\n                for (var i = 0; i < radioButtons.length; i++) {\n\n                    var radio = radioButtons[i];\n\n                    radio.addEventListener('change', callback);\n                }\n                return;\n            }\n\n            if (type === 'file') {\n\n                element.addEventListener('change', callback);\n\n                return;\n            }\n\n            element.addEventListener('input', callback);\n\n            element.addEventListener('keyup', callback);\n\n            return;\n        }\n\n        if (tagName === 'TEXTAREA') {\n\n            element.addEventListener('input', callback);\n\n            element.addEventListener('keyup', callback);\n\n            return;\n        }\n\n        element.addEventListener('input', callback);\n    }\n\n    function processGroups(data, inputElement, widgetContainer, addHandlers) {\n\n        let anyGroupRuleMet = false;\n\n        data.groups.forEach(group => {\n\n            let groupPassed = true;\n\n            group.rules?.forEach(rule => {\n\n                const fieldElement = getInputByName(rule.field);\n\n                if (!fieldElement) {\n                    console.warn(`Field element not found: ${rule.field}. Ignoring the bad field.`);\n                    return;\n                }\n\n                const fieldType = fieldElement.type.toLowerCase();\n\n                if (fieldType === 'radio') {\n\n                    var selectedRadio = document.querySelector('input[name=\"' + rule.field + '\"]:checked');\n\n                    fieldValue = selectedRadio ? selectedRadio.value : '';\n\n                } else if (fieldType === 'checkbox') {\n\n                    const findCheckboxes = `input[name=\"${rule.field}\"]`;\n\n                    var checkboxWidget = document.querySelectorAll(findCheckboxes);\n\n                    if (checkboxWidget.length > 1) {\n\n                        var checkedBoxes = document.querySelectorAll(`${findCheckboxes}:checked`);\n\n                        fieldValue = Array.from(checkedBoxes).map(checkbox => checkbox.value).join(',');\n                    } else {\n                        fieldValue = fieldElement.checked ? \"true\" : \"false\";\n                    }\n                } else {\n                    fieldValue = fieldElement.value;\n                }\n\n                var validationResult = validateRule(fieldValue, rule);\n\n                if (groupPassed && !validationResult) {\n\n                    groupPassed = false;\n                }\n\n                if (addHandlers) {\n\n                    addProperListeners(fieldElement, (e) => {\n                        processGroups(data, inputElement, widgetContainer, false);\n                    });\n                }\n            });\n\n            anyGroupRuleMet = anyGroupRuleMet || groupPassed;\n        });\n\n        if (widgetContainer) {\n\n            if (data.action === 'Show') {\n\n                if (anyGroupRuleMet) {\n                    showElement(widgetContainer);\n                } else {\n                    hideElement(widgetContainer);\n                    restoreOriginalState(inputElement);\n                }\n            }\n            else if (data.action === 'Hide') {\n\n                if (anyGroupRuleMet) {\n                    hideElement(widgetContainer);\n                    restoreOriginalState(inputElement);\n                } else {\n                    showElement(widgetContainer);\n                }\n            }\n        }\n    }\n\n    function restoreOriginalState(inputElement) {\n\n        var originalValue = inputElement.getAttribute('data-default-value') || '';\n\n        var type = inputElement.type.toLowerCase();\n\n        if (type === 'checkbox' || type === 'radio') {\n            document.querySelectorAll(`input[name=\"${inputElement.name}\"]`)\n                .forEach(element => {\n                    element.checked = (originalValue === 'on');\n                });\n        } else {\n            inputElement.value = originalValue;\n        }\n\n        triggerProperChangeEvent(inputElement);\n    }\n\n    function hideElement(element) {\n\n        if (!element.dataset.originalDisplay) {\n\n            element.dataset.originalDisplay = getComputedStyle(element).display;\n        }\n\n        element.style.display = \"none\";\n    }\n\n    function showElement(element) {\n\n        element.style.display = element.dataset.originalDisplay || \"block\";\n    }\n\n    function getInputByName(name) {\n        return document.querySelector(`input[name=\"${name}\"],select[name=\"${name}\"],textarea[name=\"${name}\"]`);\n    }\n\n    function validateRule(inputValue, rule) {\n\n        if (!rule.operator) {\n            console.warn(\"Rule operator is missing for rule\", rule);\n            return false;\n        }\n\n        var rawInputValue = inputValue ? inputValue.trim() : '';\n        var rawRuleValue = rule.value ? rule.value.trim() : '';\n\n        var inputNumber = getNumeric(rawInputValue);\n        var ruleNumber = getNumeric(rawRuleValue);\n\n        switch (rule.operator) {\n\n            case 'Is':\n                if (!isNaN(inputNumber) && !isNaN(ruleNumber)) {\n                    return inputNumber === ruleNumber;\n                }\n                return rawInputValue === rawRuleValue;\n\n            case 'IsNot':\n                if (!isNaN(inputNumber) && !isNaN(ruleNumber)) {\n                    return inputNumber !== ruleNumber;\n                }\n                return rawInputValue !== rawRuleValue;\n\n            case 'Contains':\n                return rawInputValue.includes(rawRuleValue);\n\n            case 'DoesNotContain':\n                return !rawInputValue.includes(rawRuleValue);\n\n            case 'StartsWith':\n                return rawInputValue.startsWith(rawRuleValue);\n\n            case 'EndsWith':\n                return rawInputValue.endsWith(rawRuleValue);\n\n            case 'GreaterThan':\n                if (!isNaN(inputNumber) && !isNaN(ruleNumber)) {\n                    return inputNumber > ruleNumber;\n                }\n                return false;\n\n            case 'LessThan':\n                if (!isNaN(inputNumber) && !isNaN(ruleNumber)) {\n                    return inputNumber < ruleNumber;\n                }\n                return false;\n\n            case 'Empty':\n                return rawInputValue === '';\n\n            case 'NotEmpty':\n                return rawInputValue !== '';\n\n            default:\n                console.warn(`validateRule: Unknown operator \"${rule.operator}\" in rule`, rule);\n                return false;\n        }\n    }\n\n    function getNumeric(value) {\n\n        var cleaned = (value || '').trim().replace(/,/g, '.');\n\n        var result = parseFloat(cleaned);\n\n        return result;\n    }\n\n    return {\n        initialize: initialize\n    };\n})();\n"],"names":["window","formVisibilityGroupRules","triggerProperChangeEvent","element","tagName","type","toLowerCase","dispatchEvent","Event","document","querySelectorAll","name","forEach","restoreOriginalState","inputElement","originalValue","getAttribute","checked","value","hideElement","dataset","originalDisplay","getComputedStyle","display","style","showElement","getInputByName","querySelector","getNumeric","parseFloat","trim","replace","initialize","data","elementName","action","inputType","setAttribute","widgetContainer","closest","processGroups","addHandlers","anyGroupRuleMet","groups","group","groupPassed","rules","rule","fieldElement","field","console","warn","fieldType","selectedRadio","fieldValue","findCheckboxes","checkboxWidget","length","Array","from","map","checkbox","join","validationResult","validateRule","inputValue","operator","rawInputValue","rawRuleValue","inputNumber","ruleNumber","isNaN","includes","startsWith","endsWith","addProperListeners","callback","addEventListener","checkboxes","i","radioButtons","radio","e"],"mappings":"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"}
