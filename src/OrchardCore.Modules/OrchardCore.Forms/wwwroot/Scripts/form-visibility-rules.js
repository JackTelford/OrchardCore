/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

window.formVisibilityGroupRules = function () {
  function initialize(data) {
    if (!data.elementName || data.action == 'None' || !data.groups.length) {
      return;
    }
    var inputElement = getInputByName(data.elementName);
    if (!inputElement) {
      return;
    }
    // here we have the inputs Name
    data.groups.forEach(function (group) {
      group.rules.forEach(function (rule) {
        var ruleElement = getInputByName(rule.field);
        if (!ruleElement) {
          console.warn("Rule element not found: ".concat(data.elementName));
          return;
        }
        userInputValue(ruleElement, rule, validateRule, getInputByName, data);

        // does this value meet that rule
        if (!validateRule(ruleElement.value, rule)) {
          console.log("Rule Not met: ".concat(rule.field, " ").concat(rule.operator, " ").concat(rule.value));
          return;
        }
      });
    });

    // find widgetContainer show or hide
    var widgetContainer = inputElement.closest('.widget');
    if (widgetContainer) {
      if (data.action.toLowerCase() === 'show') {
        widgetContainer.classList.remove('d-none');
      } else if (data.action.toLowerCase() === 'hide') {
        widgetContainer.classList.add('d-none');
      }
    }
  }
  function getInputByName(name) {
    return document.querySelector("input[name=\"".concat(name, "\"],select[name=\"").concat(name, "\"],textarea[name=\"").concat(name, "\"]"));
  }
  function validateRule(inputValue, rule) {
    if (!rule.operator) {
      console.warn("Rule operator is missing for rule", rule);
      return false;
    }
    var operator = rule.operator.toLowerCase();
    var lowerInputValue = inputValue ? inputValue.toLowerCase() : "";
    var lowerRuleValue = rule.value ? rule.value.toLowerCase() : "";
    var numberInputValue = parseFloat(inputValue);
    var numberRuleValue = parseFloat(rule.value);
    switch (operator) {
      case 'is':
        return lowerInputValue === lowerRuleValue;
      case 'isnot':
        return lowerInputValue !== lowerRuleValue;
      case 'contains':
        return lowerInputValue.includes(lowerRuleValue);
      case 'doesnotcontain':
        return !lowerInputValue.includes(lowerRuleValue);
      case 'startswith':
        return lowerInputValue.startsWith(lowerRuleValue);
      case 'endswith':
        return lowerInputValue.endsWith(lowerRuleValue);
      case 'greaterthan':
        if (!isNaN(numberInputValue) && !isNaN(numberRuleValue)) {
          return numberInputValue > numberRuleValue;
        }
        return inputValue > rule.value;
      case 'lessthan':
        if (!isNaN(numberInputValue) && !isNaN(numberRuleValue)) {
          return numberInputValue < numberRuleValue;
        }
        return inputValue < rule.value;
      case 'empty':
        return lowerInputValue === "";
      case 'notempty':
        return lowerInputValue !== "";
      default:
        console.warn("validateRule: Unknown operator \"".concat(rule.operator, "\" in rule"), rule);
        return false;
    }
  }
  return {
    initialize: initialize
  };
}();
function userInputValue(ruleElement, rule, validateRule, getInputByName, data) {
  function handleRuleEvent(event) {
    var currentValue;
    if (event.target.type === 'checkbox') {
      currentValue = event.target.checked ? 'true' : 'false';
    } else {
      currentValue = event.target.value;
    }
    if (validateRule(currentValue, rule)) {
      getInputByName(data.elementName).closest('.widget').classList.remove('d-none');
    } else {
      getInputByName(data.elementName).closest('.widget').classList.add('d-none');
    }
  }
  ruleElement.addEventListener('keyup', handleRuleEvent);
  ruleElement.addEventListener('change', handleRuleEvent);
}