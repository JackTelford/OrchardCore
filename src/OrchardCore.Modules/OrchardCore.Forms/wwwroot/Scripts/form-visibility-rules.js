/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _readOnlyError(name) { throw new TypeError("\"" + name + "\" is read-only"); }
window.formVisibilityGroupRules = function () {
  function initialize(data) {
    var inputElement = getInputByName(data.elementName);
    if (!inputElement) {
      return;
    }
    var widgetContainer = inputElement.closest('.widget');
    processGroups(data, inputElement, widgetContainer, true);
  }
  function processGroups(data, inputElement, widgetContainer, addHandlers) {
    if (addHandlers) {
      // capture the current visibility state of the container.
      var visibilityFlag = isElementVisible(widgetContainer);
      // The returned value, stored in visibilityFlag, is a Boolean(false if the widget is visible, true if it isnâ€™t).
      widgetContainer.setAttribute('data-original-is-visible', String(visibilityFlag));
    }
    var anyGroupRuleMet = false;
    data.groups.forEach(function (group) {
      var _group$rules;
      var groupPassed = true;
      (_group$rules = group.rules) === null || _group$rules === void 0 || _group$rules.forEach(function (rule) {
        var fieldElement = getInputByName(rule.field);
        if (!fieldElement) {
          console.warn("Field element not found: ".concat(rule.field, ". Ignoring the bad field."));
          return;
        }
        var fieldValue = fieldElement.type === 'checkbox' ? fieldElement.checked ? "true" : "false" : fieldElement.value;
        if (!validateRule(fieldValue, rule)) {
          groupPassed = false;
        }
        var fields = document.querySelectorAll('.dynamic-visibility-condition');
        for (var i = 0; i < fields.length; i++) {
          var field = fields[i];
          if (field.Name != inputElement.Name) {
            fields[i].dispatchEvent(new Event('change'));
            fields[i].dispatchEvent(new Event('keyup'));
          }
        }
        if (addHandlers) {
          fieldElement.classList.add('dynamic-visibility-condition');
          fieldElement.addEventListener('change', function (e) {
            processGroups(data, inputElement, widgetContainer, false);
          });
          fieldElement.addEventListener('keyup', function (e) {
            processGroups(data, inputElement, widgetContainer, false);
          });
        }
      });
      anyGroupRuleMet = anyGroupRuleMet || groupPassed;
    });
    if (addHandlers) {
      inputElement.dispatchEvent(new Event('change'));
    }
    var originalState = widgetContainer.getAttribute('data-original-is-visible');
    console.log('originalState:', originalState, 'elementName:', data.elementName, 'anyGroupRuleMet:', anyGroupRuleMet, 'Action=', data.action);
    if (widgetContainer) {
      if (data.action === 'Show') {
        if (anyGroupRuleMet) {
          widgetContainer.classList.remove('d-none');
        } else {
          //   console.log(`ðŸ›  [${data.elementName}] rules failed â†’ restoreOriginalState`);
          restoreOriginalState(widgetContainer);
        }
      } else if (data.action === 'Hide') {
        if (anyGroupRuleMet) {
          widgetContainer.classList.add('d-none');
        } else {
          //    console.log(`ðŸ›  [${data.elementName}] rules failed â†’ restoreOriginalState`);
          //  restoreOriginalState(widgetContainer);
        }
      } else {
        widgetContainer.getAttribute('data-original-is-visible'), _readOnlyError("originalState");
        if (originalState === 'true') {
          widgetContainer.classList.remove('d-none');
        } else if (originalState === 'false') {
          widgetContainer.classList.add('d-none');
        } else {
          widgetContainer.setAttribute('data-original-is-visible');
          widgetContainer.classList.remove('d-none');
        }
      }
    }
  }
  function restoreOriginalState(container) {
    var originalState = container.getAttribute('data-original-is-visible');
    if (originalState === 'true') {
      container.classList.add('d-none');
    } else {
      container.setAttribute('data-original-is-visible');
      container.classList.remove('d-none');
    }
  }
  function getInputByName(name) {
    return document.querySelector("input[name=\"".concat(name, "\"],select[name=\"").concat(name, "\"],textarea[name=\"").concat(name, "\"]"));
  }
  function validateRule(inputValue, rule) {
    if (!rule.operator) {
      console.warn("Rule operator is missing for rule", rule);
      return false;
    }
    var lowerInputValue = inputValue ? inputValue.trim() : "";
    var lowerRuleValue = rule.value ? rule.value.trim() : "";
    switch (rule.operator) {
      case 'Is':
        return lowerInputValue === lowerRuleValue;
      case 'IsNot':
        return lowerInputValue !== lowerRuleValue;
      case 'Contains':
        return lowerInputValue.includes(lowerRuleValue);
      case 'DoesNotContain':
        return !lowerInputValue.includes(lowerRuleValue);
      case 'StartsWith':
        return lowerInputValue.startsWith(lowerRuleValue);
      case 'EndsWith':
        return lowerInputValue.endsWith(lowerRuleValue);
      case 'GreaterThan':
        var numberInputValue = parseFloat(inputValue);
        var numberRuleValue = parseFloat(rule.value);
        if (!isNaN(numberInputValue) && !isNaN(numberRuleValue)) {
          return numberInputValue > numberRuleValue;
        }
        return inputValue > rule.value;
      case 'LessThan':
        var numberInputValue = parseFloat(inputValue);
        var numberRuleValue = parseFloat(rule.value);
        if (!isNaN(numberInputValue) && !isNaN(numberRuleValue)) {
          return numberInputValue < numberRuleValue;
        }
        return inputValue < rule.value;
      case 'Empty':
        return lowerInputValue === "";
      case 'NotEmpty':
        return lowerInputValue !== "";
      default:
        console.warn("validateRule: Unknown operator \"".concat(rule.operator, "\" in rule"), rule);
        return false;
    }
  }
  function isElementVisible(el) {
    if (!el) return false;
    var style = getComputedStyle(el);
    if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0') {
      return false;
    }
    var rect = el.getBoundingClientRect();
    return rect.width > 0 && rect.height > 0;
  }
  return {
    initialize: initialize
  };
}();